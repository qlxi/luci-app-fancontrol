name: Build and Release luci-app-fancontrol

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  SDK_URL: https://downloads.openwrt.org/snapshots/targets/qualcommax/ipq60xx/openwrt-sdk-qualcommax-ipq60xx_gcc-14.3.0_musl.Linux-x86_64.tar.zst
  PACKAGE_NAME: luci-app-fancontrol
  ARCH: qualcommax
  SUBTARGET: ipq60xx

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            git \
            python3 \
            python3-setuptools \
            unzip \
            wget \
            zlib1g-dev \
            zstd

      - name: Download and extract SDK
        run: |
          wget -q ${{ env.SDK_URL }} -O sdk.tar.zst
          tar --use-compress-program=zstd -xf sdk.tar.zst
          mv openwrt-sdk-* openwrt-sdk
          rm -f sdk.tar.zst

      - name: Initialize SDK feeds
        run: |
          cd openwrt-sdk
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Integrate and build package
        run: |
          # Copy package to SDK
          cp -r ${{ github.workspace }} openwrt-sdk/package/${{ env.PACKAGE_NAME }}
          
          cd openwrt-sdk
          
          # Configure and build
          echo "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=y" >> .config
          make defconfig
          make package/${{ env.PACKAGE_NAME }}/compile -j$(nproc)

      - name: Determine IPK path
        id: ipk_path
        run: |
          cd openwrt-sdk
          # OpenWrt SDK has predictable structure: bin/packages/<arch>/<subtarget>/base/
          IPK_DIR="bin/packages/${{ env.ARCH }}/${{ env.SUBTARGET }}/base"
          IPK_PATTERN="${{ env.PACKAGE_NAME }}_*.ipk"
          
          echo "ipk_dir=$IPK_DIR" >> $GITHUB_OUTPUT
          echo "ipk_pattern=$IPK_PATTERN" >> $GITHUB_OUTPUT
          
          # Verify the file exists
          if [ ! -f "$IPK_DIR/$IPK_PATTERN" ]; then
            echo "❌ Expected IPK not found in $IPK_DIR/"
            ls -la "$IPK_DIR/" || echo "Directory doesn't exist"
            exit 1
          fi

      - name: Prepare release asset
        id: prepare_release
        run: |
          cd openwrt-sdk
          IPK_DIR="${{ steps.ipk_path.outputs.ipk_dir }}"
          IPK_FILE=$(ls $IPK_DIR/${{ env.PACKAGE_NAME }}_*.ipk | head -1)
          IPK_BASENAME=$(basename $IPK_FILE)
          
          # Copy to predictable location for release
          cp "$IPK_FILE" "../$IPK_BASENAME"
          
          echo "ipk_basename=$IPK_BASENAME" >> $GITHUB_OUTPUT
          echo "release_path=$IPK_BASENAME" >> $GITHUB_OUTPUT
          
          echo "📦 Package ready: $IPK_BASENAME"
          du -h "../$IPK_BASENAME"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ github.sha }}
          path: ${{ steps.prepare_release.outputs.release_path }}
          retention-days: 7

      - name: Create GitHub Release
        if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' && format('nightly-{0}', github.sha) || github.ref_name }}
          name: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' && format('Nightly Build {0}', github.sha) || github.ref_name }}
          draft: false
          prerelease: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
          generate_release_notes: true
          files: |
            ${{ steps.prepare_release.outputs.release_path }}
